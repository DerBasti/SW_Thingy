#pragma once

//for true_type definitions
#include <xtr1common>
#include <string>
#include <stdlib.h>
#include <stdarg.h>

#define WIN32_LEAN_AND_MEAN
#include <windows.h>

#include "AdditionalFunctions.h"

#undef max


namespace QuickInfo {
	/*
	Private function, do not use it!
	*/
	template<class CharType> void _convertLen(WORD curLen, std::basic_string<CharType, std::char_traits<CharType>> &result) {
		if (curLen != std::numeric_limits<WORD>::max()) {
			CharType buffer[0x40] = { 0x00 };
			typedef CharType*(__cdecl* FileOpener)(int num, CharType* buf, int radix);
#pragma warning(disable:4996)
			FileOpener opener = std::is_same<CharType, char>::value ? (FileOpener)_itoa : (FileOpener)_itow;
#pragma warning(default:4996)
			opener(curLen, buffer, 10);
			result += buffer;
		}
	}

	template<class CharType, class = typename std::enable_if< is_character_type<CharType>::value>::type> std::basic_string<CharType, std::char_traits<CharType>> convertVarsToString(const CharType* fmt, va_list args) {
		
		
		std::basic_string<CharType, std::char_traits<CharType>> result;
		CharType buffer[0x40] = { 0x00 };
		WORD minLen[2] = { std::numeric_limits<WORD>::max(), std::numeric_limits<WORD>::max() };
		BYTE minLenPos = 0;

		WORD minPres = 0;

		typedef int(__cdecl* FormatConvertType)(CharType* buf, const CharType* fmt, ...);
#pragma warning(disable:4996)
		FormatConvertType sprintFormat = std::is_same<char, CharType>::value ? (FormatConvertType)sprintf : (FormatConvertType)wsprintf;
#pragma warning(default:4996)
		while (*fmt) {
			if (*fmt == '%') {
				*fmt++;
				if (*fmt >= '0' && *fmt <= '9') {
					while (*fmt >= '0' && *fmt <= '9' && minLenPos < 2) {
						minLen[minLenPos] = *fmt - 0x30;
						minLenPos++;
						*fmt++;
					}
				}
				minLenPos = 0;
				if (*fmt == '.') {
					*fmt++;
					while (*fmt >= '0' && *fmt <= '9') {
						minPres = minPres + *fmt - 0x30;
						*fmt++;
					}
				}
				std::basic_string<CharType, std::char_traits<CharType>> stringWithFmt = (CharType*)"%";
				switch (*fmt++) {
					case 0:
						result += stringWithFmt;
					break;
					case 'c':
						result += (CharType)va_arg(args, CharType);
					break;
					case 'd':
					case 'i':
						_convertLen(minLen[0], stringWithFmt);
						_convertLen(minLen[1], stringWithFmt);
						stringWithFmt += 'i';

						sprintFormat(buffer, stringWithFmt.c_str(), (int)va_arg(args, int));

						result += buffer;
					break;
					case 'f':
						_convertLen(minLen[0], stringWithFmt);
						_convertLen(minLen[1], stringWithFmt);
						if (minPres > 0) {
							stringWithFmt += (CharType*)".";
							_convertLen(minPres, stringWithFmt);
						}
						stringWithFmt += (CharType*)"f";

						sprintFormat(buffer, stringWithFmt.c_str(), (double)va_arg(args, double));

						result += buffer;
					break;
					case 's':
					{
								std::string res = (char*)va_arg(args, char*);
								result += std::basic_string<CharType, std::char_traits<CharType>>(res.begin(), res.end());
					}
					break;
					case 'w':
					{
								std::wstring res = (wchar_t*)va_arg(args, wchar_t*);
								result += std::basic_string<CharType, std::char_traits<CharType>>(res.begin(), res.end());
					}
					break;
					case 'x':
						_convertLen(minLen[0], stringWithFmt);
						_convertLen(minLen[1], stringWithFmt);
						stringWithFmt += (CharType*)"x";

						sprintFormat(buffer, stringWithFmt.c_str(), (unsigned int)va_arg(args, unsigned int));

						result += buffer;

					break;
					default:
						result += (CharType*)"%";
						result += *(fmt - 1);
				}
			}
			else {
				result += *fmt;
				*fmt++;
			}
		}
		return result;
	}
};